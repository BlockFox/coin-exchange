{"version":3,"sources":["components/AppHeader/logo.svg","components/Coin/Coin.jsx","components/Coinlist/Coinlist.jsx","components/AccountBalance/AccountBalance.jsx","components/AppHeader/AppHeader.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","TableData","styled","td","Button","button","Coin","props","className","name","ticker","balance","currency","price","onClick","event","preventDefault","handleRefresh","Table","table","Coinlist","showBalance","id","coinData","map","key","Section","section","AccountBalance","buttonText","toggleBalance","amount","Img","img","H1","h1","Header","header","AppHeader","src","logo","alt","Div","div","App","useState","balanceVisibility","setBalanceVisibility","setCoinData","getCoinData","coinID","a","axios","get","response","data","componentDidMount","coinIDs","slice","coin","promises","Promise","all","receivedCoinData","symbol","quotes","USD","useEffect","length","valueChangeTicker","values","retVal","then","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.17fd22ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst TableData = styled.td`\r\n    border: 1px solid #cccccc;\r\n    width: 10vh;\r\n    `;\r\n\r\nconst Button = styled.button`\r\n    height: 2rem;\r\n    width: 100%;\r\n    background-color: #282c34;\r\n    color: #61dafb;\r\n    border: none;\r\n    font-size: 1rem;\r\n    :active {\r\n        background: #0053ba;\r\n    }\r\n    :hover {\r\n        border: 1px solid #cccccc;\r\n        border-radius: 3px;\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nexport default function Coin(props) {\r\n\r\n    \r\n    const refreshPrice = (event) => {\r\n        // Prevent default action of submittin gthe form\r\n        event.preventDefault();\r\n\r\n        //call handle method given via props from parent component\r\n        props.handleRefresh(props.ticker);\r\n    }\r\n\r\n        return (\r\n            \r\n            <tr className =\"coin-row\">\r\n                <TableData>{props.name}</TableData>\r\n                <TableData>{props.ticker}</TableData>\r\n                <TableData>{props.balance}</TableData>\r\n                <TableData>{props.currency}{props.price}</TableData>\r\n                <TableData>\r\n                    <Button onClick = { refreshPrice}>Refresh</Button>\r\n                </TableData>\r\n            </tr>\r\n            \r\n        )\r\n\r\n}\r\n\r\nCoin.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    ticker: PropTypes.string.isRequired,\r\n    currency: PropTypes.string.isRequired,\r\n    price: PropTypes.number.isRequired\r\n\r\n}\r\n","import React from 'react';\r\nimport Coin from '../Coin/Coin';\r\nimport styled from 'styled-components';\r\n\r\nconst Table = styled.table`\r\n    margin: 50px auto 50px auto;\r\n    display: inline-block;\r\n  `;\r\n\r\n\r\nexport default function Coinlist(props) {\r\n    const toggleBalance = props.showBalance ?  \r\n        props.balance : '***'\r\n    return (\r\n        <Table className = \"Coin-table\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>Ticker</th>\r\n                    <th>Balance</th>\r\n                    <th>Price</th>\r\n                    <th>Actions</th>\r\n                </tr>\r\n            </thead>\r\n                <tbody id= \"btc_table\">\r\n                {\r\n                    props.coinData.map( \r\n                        ({\r\n                            handleRefresh,\r\n                            name, \r\n                            ticker, \r\n                            balance,\r\n                            currency, \r\n                            price\r\n                        }) => \r\n                        <Coin \r\n                            key = {ticker}\r\n                            handleRefresh = {props.handleRefresh}\r\n                            name = {name} \r\n                            ticker = {ticker} \r\n                            balance = {props.showBalance ? balance : '***'}\r\n                            currency = {currency} \r\n                            price = {price}\r\n                        />\r\n                    )\r\n                }\r\n            </tbody>\r\n        </Table>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components'\r\n\r\nconst Section = styled.section`\r\n    color: greenyellow;\r\n    font-size: 2rem;\r\n    text-align: left;\r\n    padding: 1.5rem 0 1.5rem 5rem;\r\n`; \r\n\r\nconst Button = styled.button`\r\n    margin: 10px auto 0 auto;\r\n    float: left;\r\n    border: none;\r\n    background-color: #282c34;\r\n    color: #61dafb;\r\n    font-size: 1.4rem;\r\n    :active {\r\n        background: #0053ba;\r\n    }\r\n    :hover {\r\n        border: 1px solid #cccccc;\r\n        border-radius: 3px;\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nexport default function AccountBalance(props) {\r\n\r\n    const handleBalanceButton = (event) => {\r\n        // Prevent the default action of submitting the form\r\n        event.preventDefault();\r\n        props.toggleBalance();\r\n    }\r\n\r\n    const buttonText = props.showBalance ? ' HideBalance' : ' Schow Balance';\r\n        \r\n    const toggleBalance = props.showBalance ?\r\n       <span>{props.currency}{props.amount}</span> : '***';\r\n    \r\n       return (\r\n            <>\r\n            <Section className=\"accountbalance\">\r\n                <div>\r\n                    <strong>Your Balance is : </strong> {toggleBalance}\r\n                </div>\r\n                <div>\r\n                    <Button onClick= {handleBalanceButton}>{buttonText}</Button>\r\n                </div>\r\n            </Section>\r\n            </>\r\n        )\r\n    }\r\n\r\nAccountBalance.propTypes = {\r\n    currency: PropTypes.string.isRequired,\r\n    amount: PropTypes.number.isRequired\r\n\r\n}\r\n","import React  from 'react';\r\nimport logo from './logo.svg';\r\nimport styled from 'styled-components';\r\n\r\n  const Img = styled.img`\r\n    height: 8rem;\r\n    pointer-events: none;\r\n  `;\r\n  \r\n  \r\n  const H1 = styled.h1`\r\n    font-size: 5rem;\r\n  `;\r\n  \r\n  const Header = styled.header` \r\n    background-color: #282c34;\r\n    min-height: 20vh;\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: flex-start;\r\n    font-size: calc(10px + 2vmin);\r\n    color: white;\r\n  `;\r\n  \r\n\r\n\r\nexport default function AppHeader(props) {\r\n      return (\r\n      <Header className=\"App-header\">\r\n        <Img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <H1 className =\"App-title\">Coin Exchange</H1>\r\n      </Header>\r\n      )\r\n}\r\n","import React, {useState, useEffect} from 'react';\nimport Coinlist from './components/Coinlist/Coinlist';\nimport AccountBalance from './components/AccountBalance/AccountBalance';\nimport AppHeader from './components/AppHeader/AppHeader';\nimport styled from 'styled-components';\nimport axios from 'axios'\n\nconst COIN_COUNT = 10;\n\nconst Div = styled.div`\n  text-align: center;\n  background-color: rgb(20, 56  ,97);\n  color: #cccccc;\n`\n\nexport default function App(props){\n  \n  const [balance, setBalance] = useState(10000);\n  const [balanceVisibility, setBalanceVisibility] = useState(true);\n  const [coinData, setCoinData] = useState([]);\n  \n  const getCoinData = async (coinID) => {\n    let response = \n      await axios.get('https://api.coinpaprika.com/v1/tickers/'+ coinID);\n    return response.data;\n  } \n\n  const componentDidMount = async () =>  {\n    const response = \n      await axios.get('https://api.coinpaprika.com/v1/coins');\n\n    const coinIDs = response.data.slice(0,COIN_COUNT)\n    .map( coin => coin.id);\n\n    const promises = coinIDs.map(id => \n      getCoinData(id)\n    );\n\n    const receivedCoinData = (await Promise.all(promises)).map( coin => {\n      // let price = parseFloat(Number(coin.quotes.USD.price)).toFixed(4);\n      return {\n        key: coin.id,\n        name: coin.name,\n        ticker: coin.symbol,\n        balance: 0,\n        currency: \"$\",\n        price: coin.quotes.USD.price\n      }\n    });\n    setCoinData(receivedCoinData);\n  }\n\n  useEffect(()=>{\n    if (coinData.length === 0 ) {\n      componentDidMount();\n    }\n  })\n\n  const handleRefresh =  (valueChangeTicker) => {\n    const coin =  coinData.map(\n       (values) => {\n        let retVal = {...values};\n        if (valueChangeTicker === retVal.ticker){\n          getCoinData(retVal.key)\n          .then(coin => {\n            retVal.price = coin.quotes.USD.price;\n          });\n        }\n        return retVal;\n      }\n     );\n\n     setCoinData(coin);\n  }\n\n  \n  const toggleBalance = () => {\n    setBalanceVisibility(!balanceVisibility);\n  }\n\n    return (\n      <Div className=\"App\">\n        <AppHeader />\n        <AccountBalance \n          currency = \"$\" \n          amount = {balance} \n          showBalance ={balanceVisibility} \n          toggleBalance = {toggleBalance}\n          \n        />\n        <Coinlist \n          coinData = {coinData} \n          handleRefresh={handleRefresh}\n          showBalance ={balanceVisibility} \n        />\n        \n      </Div>\n    );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}